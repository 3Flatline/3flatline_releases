name: Create Release

# This workflow runs when a new tag is pushed that matches the pattern 'v*.*.*'
# For example: v1.0.0, v2.3.4
on:
    push:
        tags:
            - "v*"

# Sets permissions for the GITHUB_TOKEN to allow creating a release
permissions:
    contents: write

jobs:
    create-release:
        runs-on: ubuntu-latest
        steps:
            # Step 1: Check out the repository's code with full history for release notes
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            # Step 2: Create a tarball of all files
            - name: Create release package
              run: |
                  mkdir -p release-assets
                  set -e
                  chmod +x 3flatline-cli_arm_mac 3flatline-cli_x86_64_linux 3flatline-server_arm_mac 3flatline-server_x86_64_linux
                  cp 3flatline-cli_arm_mac release-assets/
                  cp 3flatline-cli_x86_64_linux release-assets/
                  cp 3flatline-cli_amd64_linux release-assets/
                  tar -czvf release-assets/3flatline-${{ github.ref_name }}.tar.gz --exclude='./.git' --exclude='./.github' --exclude='./release-assets' .
                  ls -la release-assets/

            # Step 3: Create GitHub Release
            - name: Create Release
              uses: ncipollo/release-action@v1
              with:
                  # This token is provided by GitHub Actions. No setup is needed.
                  token: ${{ secrets.GITHUB_TOKEN }}
                  # Path to the files you want to upload as assets
                  artifacts: |
                    release-assets/3flatline-${{ github.ref_name }}.tar.gz
                    release-assets/3flatline-cli_arm_mac
                    release-assets/3flatline-cli_x86_64_linux
                    release-assets/3flatline-cli_amd64_linux
                  # Automatically generates release notes from pull requests and commits
                  generateReleaseNotes: true
                  # Draft release (false means it's published immediately)
                  draft: false
                  # Set prerelease to true if the tag contains '-beta', '-alpha', or '-rc'
                  prerelease: ${{ contains(github.ref, '-beta') || contains(github.ref, '-alpha') || contains(github.ref, '-rc') }}
                  # Fallback to tag as-is if it doesn't follow semantic versioning
                  # Set release name to the tag that triggered this workflow
                  name: ${{ github.ref_name }}
                  # Add a body to the release
                  body: |
                      ## 3flatline Release ${{ github.ref_name }}

